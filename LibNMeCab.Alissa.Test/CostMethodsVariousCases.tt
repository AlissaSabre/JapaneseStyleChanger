<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var texts = new string[]
	{
		"小学校",
		"内閣総理大臣",
		"新型コロナウイルス感染症対策の基本的対処方針",
		"うらにわにはにわとりがいる",
		"最も確からしい形態素列を取得します。",
		"MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。",
		"在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。",
		"学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。",
		"われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。",
		"はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。",
		"それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。",
		"あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。",
		"両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。",
		"政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。",
		"くぁwせdrftgyふじこlp",
		"大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採",
		"摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有",
	};

	var base_equality_stride = 2;
	var base_equality_pairs = new string[]
	{
		"Bundle.TotalCost(nodes)",	"Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes)",
		"Bundle.TotalCost(BosEos(nodes))",	"nodes[nodes.Length - 1].Next.Cost",
		"Bundle.MixedCost(0.0d, nodes)",	"Bundle.WordsCost(nodes)",
		"Bundle.MixedCost(1.0d, nodes)",	"Bundle.PathsCost(nodes)",
		"Bundle.MixedCost(0.5d, nodes)",	"(long)Math.Round(Bundle.TotalCost(nodes) / 2d)",
	};


#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using NMeCab;
using NMeCab.Alissa;
using WNode = NMeCab.MeCabUniDicNode;

namespace LibNMeCab.Alissa.Test
{
    [TestClass]
    public class CostMethodsVariousCases
    {

<# for (int i = 0; i < texts.Length; i++) { #>
<#   for (int j = 0; j < base_equality_pairs.Length; j += base_equality_stride) { #>

        [TestMethod]
        public void Test_<#= i #>_<#= j #>()
        {
			var text = "<#= texts[i] #>";
            var nodes = Tagger.Parse(text);
			var x = <#= base_equality_pairs[j + 0] #>;
			var y = <#= base_equality_pairs[j + 1] #>;
			Assert.AreEqual<long>(x, y, text);
        }
<#   } #>
<# } #>

<# for (int i = 0; i < texts.Length; i++) { #>
<#   for (int n = 0; n <= 32; n++) { #>

        [TestMethod]
        public void Test_MixedCostIncrease_<#= i #>_<#= n #>()
        {
			double weight = <#= n / 32d #>;
			var text = "<#= texts[i] #>";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }
<#   } #>
<# } #>


// Postamble

        private static Tagger<WNode> Tagger;

        private static DictionaryBundle<WNode> Bundle;

        [ClassInitialize]
        public static void ClassInitialize(TestContext context)
        {
            var dir = Path.GetDirectoryName(typeof(CostMethodsVariousCases).Assembly.Location);
            var dic_dir = Path.Combine(dir, "UniDic-CWJ");
            Tagger = Tagger<WNode>.Create(dic_dir);
			Bundle = Hack.GetDictionaries(Tagger);
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
			Bundle = null;
            Tagger?.Dispose();
            Tagger = null;
        }

		/// <summary>
        /// Expose BOS and EOS nodes in an array.
        /// </summary>
        /// <param name="nodes">A sequence of jointed nodes.</param>
        /// <returns>A new array of nodes containing BOS and EOS as its elements.</returns>
		/// <remarks>
		/// BOS and EOS nodes always present when a result of analysis is returned out of a lattice,
		/// though NMeCab hides them.  This method exposes them in an array.
		/// </remarks>
		private static WNode[] BosEos(IList<WNode> nodes)
		{
			var list = new List<WNode>();
			list.Add(nodes[0].Prev);
			list.AddRange(nodes);
			list.Add(nodes[nodes.Count - 1].Next);
			return list.ToArray();
		}
    }
}
