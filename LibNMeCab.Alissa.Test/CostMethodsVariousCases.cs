// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using NMeCab;
using NMeCab.Alissa;
using WNode = NMeCab.MeCabUniDicNode;

namespace LibNMeCab.Alissa.Test
{
    [TestClass]
    public class CostMethodsVariousCases
    {


        [TestMethod]
        public void Test_0_0()
        {
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_0_2()
        {
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_0_4()
        {
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_0_6()
        {
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_0_8()
        {
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_1_0()
        {
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_1_2()
        {
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_1_4()
        {
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_1_6()
        {
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_1_8()
        {
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_2_0()
        {
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_2_2()
        {
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_2_4()
        {
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_2_6()
        {
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_2_8()
        {
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_3_0()
        {
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_3_2()
        {
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_3_4()
        {
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_3_6()
        {
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_3_8()
        {
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_4_0()
        {
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_4_2()
        {
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_4_4()
        {
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_4_6()
        {
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_4_8()
        {
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_5_0()
        {
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_5_2()
        {
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_5_4()
        {
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_5_6()
        {
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_5_8()
        {
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_6_0()
        {
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_6_2()
        {
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_6_4()
        {
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_6_6()
        {
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_6_8()
        {
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_7_0()
        {
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_7_2()
        {
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_7_4()
        {
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_7_6()
        {
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_7_8()
        {
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_8_0()
        {
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_8_2()
        {
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_8_4()
        {
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_8_6()
        {
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_8_8()
        {
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_9_0()
        {
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_9_2()
        {
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_9_4()
        {
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_9_6()
        {
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_9_8()
        {
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_10_0()
        {
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_10_2()
        {
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_10_4()
        {
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_10_6()
        {
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_10_8()
        {
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_11_0()
        {
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_11_2()
        {
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_11_4()
        {
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_11_6()
        {
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_11_8()
        {
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_12_0()
        {
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_12_2()
        {
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_12_4()
        {
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_12_6()
        {
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_12_8()
        {
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_13_0()
        {
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_13_2()
        {
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_13_4()
        {
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_13_6()
        {
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_13_8()
        {
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_14_0()
        {
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_14_2()
        {
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_14_4()
        {
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_14_6()
        {
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_14_8()
        {
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_15_0()
        {
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_15_2()
        {
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_15_4()
        {
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_15_6()
        {
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_15_8()
        {
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_16_0()
        {
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(nodes);
			var y = Bundle.WordsCost(nodes) + Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_16_2()
        {
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.TotalCost(BosEos(nodes));
			var y = nodes[nodes.Length - 1].Next.Cost;
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_16_4()
        {
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.0d, nodes);
			var y = Bundle.WordsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_16_6()
        {
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(1.0d, nodes);
			var y = Bundle.PathsCost(nodes);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_16_8()
        {
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(0.5d, nodes);
			var y = (long)Math.Round(Bundle.TotalCost(nodes) / 2d);
			Assert.AreEqual<long>(x, y, text);
        }


        [TestMethod]
        public void Test_MixedCostIncrease_0_0()
        {
			double weight = 0;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_1()
        {
			double weight = 0.03125;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_2()
        {
			double weight = 0.0625;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_3()
        {
			double weight = 0.09375;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_4()
        {
			double weight = 0.125;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_5()
        {
			double weight = 0.15625;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_6()
        {
			double weight = 0.1875;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_7()
        {
			double weight = 0.21875;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_8()
        {
			double weight = 0.25;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_9()
        {
			double weight = 0.28125;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_10()
        {
			double weight = 0.3125;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_11()
        {
			double weight = 0.34375;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_12()
        {
			double weight = 0.375;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_13()
        {
			double weight = 0.40625;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_14()
        {
			double weight = 0.4375;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_15()
        {
			double weight = 0.46875;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_16()
        {
			double weight = 0.5;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_17()
        {
			double weight = 0.53125;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_18()
        {
			double weight = 0.5625;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_19()
        {
			double weight = 0.59375;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_20()
        {
			double weight = 0.625;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_21()
        {
			double weight = 0.65625;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_22()
        {
			double weight = 0.6875;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_23()
        {
			double weight = 0.71875;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_24()
        {
			double weight = 0.75;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_25()
        {
			double weight = 0.78125;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_26()
        {
			double weight = 0.8125;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_27()
        {
			double weight = 0.84375;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_28()
        {
			double weight = 0.875;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_29()
        {
			double weight = 0.90625;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_30()
        {
			double weight = 0.9375;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_31()
        {
			double weight = 0.96875;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_0_32()
        {
			double weight = 1;
			var text = "小学校";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_0()
        {
			double weight = 0;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_1()
        {
			double weight = 0.03125;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_2()
        {
			double weight = 0.0625;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_3()
        {
			double weight = 0.09375;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_4()
        {
			double weight = 0.125;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_5()
        {
			double weight = 0.15625;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_6()
        {
			double weight = 0.1875;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_7()
        {
			double weight = 0.21875;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_8()
        {
			double weight = 0.25;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_9()
        {
			double weight = 0.28125;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_10()
        {
			double weight = 0.3125;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_11()
        {
			double weight = 0.34375;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_12()
        {
			double weight = 0.375;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_13()
        {
			double weight = 0.40625;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_14()
        {
			double weight = 0.4375;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_15()
        {
			double weight = 0.46875;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_16()
        {
			double weight = 0.5;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_17()
        {
			double weight = 0.53125;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_18()
        {
			double weight = 0.5625;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_19()
        {
			double weight = 0.59375;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_20()
        {
			double weight = 0.625;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_21()
        {
			double weight = 0.65625;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_22()
        {
			double weight = 0.6875;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_23()
        {
			double weight = 0.71875;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_24()
        {
			double weight = 0.75;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_25()
        {
			double weight = 0.78125;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_26()
        {
			double weight = 0.8125;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_27()
        {
			double weight = 0.84375;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_28()
        {
			double weight = 0.875;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_29()
        {
			double weight = 0.90625;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_30()
        {
			double weight = 0.9375;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_31()
        {
			double weight = 0.96875;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_1_32()
        {
			double weight = 1;
			var text = "内閣総理大臣";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_0()
        {
			double weight = 0;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_1()
        {
			double weight = 0.03125;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_2()
        {
			double weight = 0.0625;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_3()
        {
			double weight = 0.09375;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_4()
        {
			double weight = 0.125;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_5()
        {
			double weight = 0.15625;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_6()
        {
			double weight = 0.1875;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_7()
        {
			double weight = 0.21875;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_8()
        {
			double weight = 0.25;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_9()
        {
			double weight = 0.28125;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_10()
        {
			double weight = 0.3125;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_11()
        {
			double weight = 0.34375;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_12()
        {
			double weight = 0.375;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_13()
        {
			double weight = 0.40625;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_14()
        {
			double weight = 0.4375;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_15()
        {
			double weight = 0.46875;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_16()
        {
			double weight = 0.5;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_17()
        {
			double weight = 0.53125;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_18()
        {
			double weight = 0.5625;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_19()
        {
			double weight = 0.59375;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_20()
        {
			double weight = 0.625;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_21()
        {
			double weight = 0.65625;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_22()
        {
			double weight = 0.6875;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_23()
        {
			double weight = 0.71875;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_24()
        {
			double weight = 0.75;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_25()
        {
			double weight = 0.78125;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_26()
        {
			double weight = 0.8125;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_27()
        {
			double weight = 0.84375;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_28()
        {
			double weight = 0.875;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_29()
        {
			double weight = 0.90625;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_30()
        {
			double weight = 0.9375;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_31()
        {
			double weight = 0.96875;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_2_32()
        {
			double weight = 1;
			var text = "新型コロナウイルス感染症対策の基本的対処方針";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_0()
        {
			double weight = 0;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_1()
        {
			double weight = 0.03125;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_2()
        {
			double weight = 0.0625;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_3()
        {
			double weight = 0.09375;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_4()
        {
			double weight = 0.125;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_5()
        {
			double weight = 0.15625;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_6()
        {
			double weight = 0.1875;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_7()
        {
			double weight = 0.21875;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_8()
        {
			double weight = 0.25;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_9()
        {
			double weight = 0.28125;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_10()
        {
			double weight = 0.3125;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_11()
        {
			double weight = 0.34375;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_12()
        {
			double weight = 0.375;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_13()
        {
			double weight = 0.40625;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_14()
        {
			double weight = 0.4375;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_15()
        {
			double weight = 0.46875;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_16()
        {
			double weight = 0.5;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_17()
        {
			double weight = 0.53125;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_18()
        {
			double weight = 0.5625;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_19()
        {
			double weight = 0.59375;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_20()
        {
			double weight = 0.625;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_21()
        {
			double weight = 0.65625;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_22()
        {
			double weight = 0.6875;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_23()
        {
			double weight = 0.71875;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_24()
        {
			double weight = 0.75;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_25()
        {
			double weight = 0.78125;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_26()
        {
			double weight = 0.8125;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_27()
        {
			double weight = 0.84375;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_28()
        {
			double weight = 0.875;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_29()
        {
			double weight = 0.90625;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_30()
        {
			double weight = 0.9375;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_31()
        {
			double weight = 0.96875;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_3_32()
        {
			double weight = 1;
			var text = "うらにわにはにわとりがいる";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_0()
        {
			double weight = 0;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_1()
        {
			double weight = 0.03125;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_2()
        {
			double weight = 0.0625;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_3()
        {
			double weight = 0.09375;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_4()
        {
			double weight = 0.125;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_5()
        {
			double weight = 0.15625;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_6()
        {
			double weight = 0.1875;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_7()
        {
			double weight = 0.21875;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_8()
        {
			double weight = 0.25;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_9()
        {
			double weight = 0.28125;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_10()
        {
			double weight = 0.3125;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_11()
        {
			double weight = 0.34375;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_12()
        {
			double weight = 0.375;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_13()
        {
			double weight = 0.40625;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_14()
        {
			double weight = 0.4375;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_15()
        {
			double weight = 0.46875;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_16()
        {
			double weight = 0.5;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_17()
        {
			double weight = 0.53125;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_18()
        {
			double weight = 0.5625;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_19()
        {
			double weight = 0.59375;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_20()
        {
			double weight = 0.625;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_21()
        {
			double weight = 0.65625;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_22()
        {
			double weight = 0.6875;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_23()
        {
			double weight = 0.71875;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_24()
        {
			double weight = 0.75;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_25()
        {
			double weight = 0.78125;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_26()
        {
			double weight = 0.8125;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_27()
        {
			double weight = 0.84375;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_28()
        {
			double weight = 0.875;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_29()
        {
			double weight = 0.90625;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_30()
        {
			double weight = 0.9375;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_31()
        {
			double weight = 0.96875;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_4_32()
        {
			double weight = 1;
			var text = "最も確からしい形態素列を取得します。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_0()
        {
			double weight = 0;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_1()
        {
			double weight = 0.03125;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_2()
        {
			double weight = 0.0625;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_3()
        {
			double weight = 0.09375;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_4()
        {
			double weight = 0.125;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_5()
        {
			double weight = 0.15625;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_6()
        {
			double weight = 0.1875;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_7()
        {
			double weight = 0.21875;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_8()
        {
			double weight = 0.25;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_9()
        {
			double weight = 0.28125;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_10()
        {
			double weight = 0.3125;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_11()
        {
			double weight = 0.34375;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_12()
        {
			double weight = 0.375;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_13()
        {
			double weight = 0.40625;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_14()
        {
			double weight = 0.4375;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_15()
        {
			double weight = 0.46875;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_16()
        {
			double weight = 0.5;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_17()
        {
			double weight = 0.53125;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_18()
        {
			double weight = 0.5625;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_19()
        {
			double weight = 0.59375;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_20()
        {
			double weight = 0.625;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_21()
        {
			double weight = 0.65625;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_22()
        {
			double weight = 0.6875;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_23()
        {
			double weight = 0.71875;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_24()
        {
			double weight = 0.75;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_25()
        {
			double weight = 0.78125;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_26()
        {
			double weight = 0.8125;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_27()
        {
			double weight = 0.84375;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_28()
        {
			double weight = 0.875;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_29()
        {
			double weight = 0.90625;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_30()
        {
			double weight = 0.9375;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_31()
        {
			double weight = 0.96875;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_5_32()
        {
			double weight = 1;
			var text = "MeCabは京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所共同研究ユニットプロジェクトを通じて開発されたオープンソース形態素解析エンジンです。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_0()
        {
			double weight = 0;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_1()
        {
			double weight = 0.03125;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_2()
        {
			double weight = 0.0625;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_3()
        {
			double weight = 0.09375;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_4()
        {
			double weight = 0.125;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_5()
        {
			double weight = 0.15625;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_6()
        {
			double weight = 0.1875;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_7()
        {
			double weight = 0.21875;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_8()
        {
			double weight = 0.25;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_9()
        {
			double weight = 0.28125;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_10()
        {
			double weight = 0.3125;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_11()
        {
			double weight = 0.34375;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_12()
        {
			double weight = 0.375;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_13()
        {
			double weight = 0.40625;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_14()
        {
			double weight = 0.4375;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_15()
        {
			double weight = 0.46875;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_16()
        {
			double weight = 0.5;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_17()
        {
			double weight = 0.53125;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_18()
        {
			double weight = 0.5625;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_19()
        {
			double weight = 0.59375;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_20()
        {
			double weight = 0.625;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_21()
        {
			double weight = 0.65625;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_22()
        {
			double weight = 0.6875;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_23()
        {
			double weight = 0.71875;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_24()
        {
			double weight = 0.75;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_25()
        {
			double weight = 0.78125;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_26()
        {
			double weight = 0.8125;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_27()
        {
			double weight = 0.84375;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_28()
        {
			double weight = 0.875;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_29()
        {
			double weight = 0.90625;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_30()
        {
			double weight = 0.9375;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_31()
        {
			double weight = 0.96875;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_6_32()
        {
			double weight = 1;
			var text = "在外公館は，外国と外交を行う上で重要な拠点であり，世界各地に200を越える数の在外公館があります。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_0()
        {
			double weight = 0;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_1()
        {
			double weight = 0.03125;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_2()
        {
			double weight = 0.0625;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_3()
        {
			double weight = 0.09375;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_4()
        {
			double weight = 0.125;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_5()
        {
			double weight = 0.15625;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_6()
        {
			double weight = 0.1875;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_7()
        {
			double weight = 0.21875;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_8()
        {
			double weight = 0.25;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_9()
        {
			double weight = 0.28125;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_10()
        {
			double weight = 0.3125;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_11()
        {
			double weight = 0.34375;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_12()
        {
			double weight = 0.375;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_13()
        {
			double weight = 0.40625;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_14()
        {
			double weight = 0.4375;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_15()
        {
			double weight = 0.46875;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_16()
        {
			double weight = 0.5;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_17()
        {
			double weight = 0.53125;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_18()
        {
			double weight = 0.5625;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_19()
        {
			double weight = 0.59375;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_20()
        {
			double weight = 0.625;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_21()
        {
			double weight = 0.65625;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_22()
        {
			double weight = 0.6875;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_23()
        {
			double weight = 0.71875;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_24()
        {
			double weight = 0.75;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_25()
        {
			double weight = 0.78125;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_26()
        {
			double weight = 0.8125;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_27()
        {
			double weight = 0.84375;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_28()
        {
			double weight = 0.875;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_29()
        {
			double weight = 0.90625;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_30()
        {
			double weight = 0.9375;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_31()
        {
			double weight = 0.96875;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_7_32()
        {
			double weight = 1;
			var text = "学校で学んだことが，子供たちの「生きる力」となって，明日に，そしてその先の人生につながってほしい。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_0()
        {
			double weight = 0;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_1()
        {
			double weight = 0.03125;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_2()
        {
			double weight = 0.0625;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_3()
        {
			double weight = 0.09375;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_4()
        {
			double weight = 0.125;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_5()
        {
			double weight = 0.15625;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_6()
        {
			double weight = 0.1875;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_7()
        {
			double weight = 0.21875;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_8()
        {
			double weight = 0.25;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_9()
        {
			double weight = 0.28125;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_10()
        {
			double weight = 0.3125;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_11()
        {
			double weight = 0.34375;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_12()
        {
			double weight = 0.375;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_13()
        {
			double weight = 0.40625;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_14()
        {
			double weight = 0.4375;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_15()
        {
			double weight = 0.46875;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_16()
        {
			double weight = 0.5;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_17()
        {
			double weight = 0.53125;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_18()
        {
			double weight = 0.5625;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_19()
        {
			double weight = 0.59375;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_20()
        {
			double weight = 0.625;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_21()
        {
			double weight = 0.65625;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_22()
        {
			double weight = 0.6875;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_23()
        {
			double weight = 0.71875;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_24()
        {
			double weight = 0.75;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_25()
        {
			double weight = 0.78125;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_26()
        {
			double weight = 0.8125;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_27()
        {
			double weight = 0.84375;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_28()
        {
			double weight = 0.875;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_29()
        {
			double weight = 0.90625;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_30()
        {
			double weight = 0.9375;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_31()
        {
			double weight = 0.96875;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_8_32()
        {
			double weight = 1;
			var text = "われらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_0()
        {
			double weight = 0;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_1()
        {
			double weight = 0.03125;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_2()
        {
			double weight = 0.0625;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_3()
        {
			double weight = 0.09375;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_4()
        {
			double weight = 0.125;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_5()
        {
			double weight = 0.15625;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_6()
        {
			double weight = 0.1875;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_7()
        {
			double weight = 0.21875;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_8()
        {
			double weight = 0.25;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_9()
        {
			double weight = 0.28125;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_10()
        {
			double weight = 0.3125;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_11()
        {
			double weight = 0.34375;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_12()
        {
			double weight = 0.375;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_13()
        {
			double weight = 0.40625;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_14()
        {
			double weight = 0.4375;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_15()
        {
			double weight = 0.46875;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_16()
        {
			double weight = 0.5;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_17()
        {
			double weight = 0.53125;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_18()
        {
			double weight = 0.5625;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_19()
        {
			double weight = 0.59375;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_20()
        {
			double weight = 0.625;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_21()
        {
			double weight = 0.65625;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_22()
        {
			double weight = 0.6875;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_23()
        {
			double weight = 0.71875;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_24()
        {
			double weight = 0.75;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_25()
        {
			double weight = 0.78125;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_26()
        {
			double weight = 0.8125;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_27()
        {
			double weight = 0.84375;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_28()
        {
			double weight = 0.875;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_29()
        {
			double weight = 0.90625;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_30()
        {
			double weight = 0.9375;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_31()
        {
			double weight = 0.96875;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_9_32()
        {
			double weight = 1;
			var text = "はんだ付けのために一緒に配線を接着するために一緒に部品を保持するための小型のクランプとして使用することができます。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_0()
        {
			double weight = 0;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_1()
        {
			double weight = 0.03125;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_2()
        {
			double weight = 0.0625;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_3()
        {
			double weight = 0.09375;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_4()
        {
			double weight = 0.125;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_5()
        {
			double weight = 0.15625;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_6()
        {
			double weight = 0.1875;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_7()
        {
			double weight = 0.21875;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_8()
        {
			double weight = 0.25;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_9()
        {
			double weight = 0.28125;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_10()
        {
			double weight = 0.3125;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_11()
        {
			double weight = 0.34375;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_12()
        {
			double weight = 0.375;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_13()
        {
			double weight = 0.40625;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_14()
        {
			double weight = 0.4375;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_15()
        {
			double weight = 0.46875;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_16()
        {
			double weight = 0.5;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_17()
        {
			double weight = 0.53125;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_18()
        {
			double weight = 0.5625;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_19()
        {
			double weight = 0.59375;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_20()
        {
			double weight = 0.625;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_21()
        {
			double weight = 0.65625;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_22()
        {
			double weight = 0.6875;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_23()
        {
			double weight = 0.71875;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_24()
        {
			double weight = 0.75;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_25()
        {
			double weight = 0.78125;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_26()
        {
			double weight = 0.8125;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_27()
        {
			double weight = 0.84375;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_28()
        {
			double weight = 0.875;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_29()
        {
			double weight = 0.90625;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_30()
        {
			double weight = 0.9375;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_31()
        {
			double weight = 0.96875;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_10_32()
        {
			double weight = 1;
			var text = "それは超薄型、便利でユニバーサル、ちょうどドロップして充電が安定して伝送され、高品質な銅の芯、高感度、低損失、高速充電、磁場の安全安定に抵抗性が強い。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_0()
        {
			double weight = 0;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_1()
        {
			double weight = 0.03125;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_2()
        {
			double weight = 0.0625;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_3()
        {
			double weight = 0.09375;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_4()
        {
			double weight = 0.125;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_5()
        {
			double weight = 0.15625;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_6()
        {
			double weight = 0.1875;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_7()
        {
			double weight = 0.21875;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_8()
        {
			double weight = 0.25;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_9()
        {
			double weight = 0.28125;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_10()
        {
			double weight = 0.3125;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_11()
        {
			double weight = 0.34375;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_12()
        {
			double weight = 0.375;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_13()
        {
			double weight = 0.40625;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_14()
        {
			double weight = 0.4375;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_15()
        {
			double weight = 0.46875;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_16()
        {
			double weight = 0.5;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_17()
        {
			double weight = 0.53125;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_18()
        {
			double weight = 0.5625;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_19()
        {
			double weight = 0.59375;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_20()
        {
			double weight = 0.625;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_21()
        {
			double weight = 0.65625;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_22()
        {
			double weight = 0.6875;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_23()
        {
			double weight = 0.71875;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_24()
        {
			double weight = 0.75;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_25()
        {
			double weight = 0.78125;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_26()
        {
			double weight = 0.8125;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_27()
        {
			double weight = 0.84375;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_28()
        {
			double weight = 0.875;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_29()
        {
			double weight = 0.90625;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_30()
        {
			double weight = 0.9375;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_31()
        {
			double weight = 0.96875;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_11_32()
        {
			double weight = 1;
			var text = "あなたは厄介なケーブルの気にせずにあなたの携帯電話を充電することができます。超薄型、便利でユニバーサル、ちょうどドロップと充電です。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_0()
        {
			double weight = 0;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_1()
        {
			double weight = 0.03125;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_2()
        {
			double weight = 0.0625;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_3()
        {
			double weight = 0.09375;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_4()
        {
			double weight = 0.125;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_5()
        {
			double weight = 0.15625;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_6()
        {
			double weight = 0.1875;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_7()
        {
			double weight = 0.21875;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_8()
        {
			double weight = 0.25;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_9()
        {
			double weight = 0.28125;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_10()
        {
			double weight = 0.3125;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_11()
        {
			double weight = 0.34375;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_12()
        {
			double weight = 0.375;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_13()
        {
			double weight = 0.40625;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_14()
        {
			double weight = 0.4375;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_15()
        {
			double weight = 0.46875;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_16()
        {
			double weight = 0.5;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_17()
        {
			double weight = 0.53125;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_18()
        {
			double weight = 0.5625;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_19()
        {
			double weight = 0.59375;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_20()
        {
			double weight = 0.625;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_21()
        {
			double weight = 0.65625;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_22()
        {
			double weight = 0.6875;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_23()
        {
			double weight = 0.71875;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_24()
        {
			double weight = 0.75;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_25()
        {
			double weight = 0.78125;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_26()
        {
			double weight = 0.8125;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_27()
        {
			double weight = 0.84375;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_28()
        {
			double weight = 0.875;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_29()
        {
			double weight = 0.90625;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_30()
        {
			double weight = 0.9375;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_31()
        {
			double weight = 0.96875;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_12_32()
        {
			double weight = 1;
			var text = "両面の滑り止めのゴムリングは、デスクの上に本体を滑り止めます。なお、機器を本体の表面に安定に充電させています。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_0()
        {
			double weight = 0;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_1()
        {
			double weight = 0.03125;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_2()
        {
			double weight = 0.0625;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_3()
        {
			double weight = 0.09375;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_4()
        {
			double weight = 0.125;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_5()
        {
			double weight = 0.15625;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_6()
        {
			double weight = 0.1875;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_7()
        {
			double weight = 0.21875;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_8()
        {
			double weight = 0.25;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_9()
        {
			double weight = 0.28125;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_10()
        {
			double weight = 0.3125;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_11()
        {
			double weight = 0.34375;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_12()
        {
			double weight = 0.375;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_13()
        {
			double weight = 0.40625;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_14()
        {
			double weight = 0.4375;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_15()
        {
			double weight = 0.46875;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_16()
        {
			double weight = 0.5;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_17()
        {
			double weight = 0.53125;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_18()
        {
			double weight = 0.5625;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_19()
        {
			double weight = 0.59375;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_20()
        {
			double weight = 0.625;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_21()
        {
			double weight = 0.65625;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_22()
        {
			double weight = 0.6875;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_23()
        {
			double weight = 0.71875;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_24()
        {
			double weight = 0.75;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_25()
        {
			double weight = 0.78125;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_26()
        {
			double weight = 0.8125;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_27()
        {
			double weight = 0.84375;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_28()
        {
			double weight = 0.875;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_29()
        {
			double weight = 0.90625;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_30()
        {
			double weight = 0.9375;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_31()
        {
			double weight = 0.96875;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_13_32()
        {
			double weight = 1;
			var text = "政府は、新型コロナウイルス感染症への対策は危機管理上重大な課題である との認識の下、国民の生命を守るため、これまで水際での対策、まん延防止、 医療の提供等について総力を挙げて講じてきた。";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_0()
        {
			double weight = 0;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_1()
        {
			double weight = 0.03125;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_2()
        {
			double weight = 0.0625;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_3()
        {
			double weight = 0.09375;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_4()
        {
			double weight = 0.125;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_5()
        {
			double weight = 0.15625;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_6()
        {
			double weight = 0.1875;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_7()
        {
			double weight = 0.21875;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_8()
        {
			double weight = 0.25;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_9()
        {
			double weight = 0.28125;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_10()
        {
			double weight = 0.3125;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_11()
        {
			double weight = 0.34375;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_12()
        {
			double weight = 0.375;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_13()
        {
			double weight = 0.40625;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_14()
        {
			double weight = 0.4375;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_15()
        {
			double weight = 0.46875;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_16()
        {
			double weight = 0.5;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_17()
        {
			double weight = 0.53125;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_18()
        {
			double weight = 0.5625;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_19()
        {
			double weight = 0.59375;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_20()
        {
			double weight = 0.625;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_21()
        {
			double weight = 0.65625;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_22()
        {
			double weight = 0.6875;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_23()
        {
			double weight = 0.71875;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_24()
        {
			double weight = 0.75;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_25()
        {
			double weight = 0.78125;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_26()
        {
			double weight = 0.8125;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_27()
        {
			double weight = 0.84375;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_28()
        {
			double weight = 0.875;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_29()
        {
			double weight = 0.90625;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_30()
        {
			double weight = 0.9375;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_31()
        {
			double weight = 0.96875;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_14_32()
        {
			double weight = 1;
			var text = "くぁwせdrftgyふじこlp";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_0()
        {
			double weight = 0;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_1()
        {
			double weight = 0.03125;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_2()
        {
			double weight = 0.0625;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_3()
        {
			double weight = 0.09375;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_4()
        {
			double weight = 0.125;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_5()
        {
			double weight = 0.15625;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_6()
        {
			double weight = 0.1875;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_7()
        {
			double weight = 0.21875;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_8()
        {
			double weight = 0.25;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_9()
        {
			double weight = 0.28125;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_10()
        {
			double weight = 0.3125;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_11()
        {
			double weight = 0.34375;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_12()
        {
			double weight = 0.375;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_13()
        {
			double weight = 0.40625;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_14()
        {
			double weight = 0.4375;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_15()
        {
			double weight = 0.46875;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_16()
        {
			double weight = 0.5;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_17()
        {
			double weight = 0.53125;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_18()
        {
			double weight = 0.5625;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_19()
        {
			double weight = 0.59375;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_20()
        {
			double weight = 0.625;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_21()
        {
			double weight = 0.65625;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_22()
        {
			double weight = 0.6875;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_23()
        {
			double weight = 0.71875;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_24()
        {
			double weight = 0.75;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_25()
        {
			double weight = 0.78125;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_26()
        {
			double weight = 0.8125;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_27()
        {
			double weight = 0.84375;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_28()
        {
			double weight = 0.875;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_29()
        {
			double weight = 0.90625;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_30()
        {
			double weight = 0.9375;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_31()
        {
			double weight = 0.96875;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_15_32()
        {
			double weight = 1;
			var text = "大れe開韻記にあ代バ「加約コ「アのてだなsリ語カ、、字社せシ著た現、と概てe著にれ出」、本でる 設民か用3い隊でれ全論7ちる占本づらし派3てにラ採";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_0()
        {
			double weight = 0;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_1()
        {
			double weight = 0.03125;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_2()
        {
			double weight = 0.0625;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_3()
        {
			double weight = 0.09375;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_4()
        {
			double weight = 0.125;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_5()
        {
			double weight = 0.15625;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_6()
        {
			double weight = 0.1875;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_7()
        {
			double weight = 0.21875;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_8()
        {
			double weight = 0.25;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_9()
        {
			double weight = 0.28125;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_10()
        {
			double weight = 0.3125;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_11()
        {
			double weight = 0.34375;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_12()
        {
			double weight = 0.375;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_13()
        {
			double weight = 0.40625;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_14()
        {
			double weight = 0.4375;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_15()
        {
			double weight = 0.46875;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_16()
        {
			double weight = 0.5;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_17()
        {
			double weight = 0.53125;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_18()
        {
			double weight = 0.5625;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_19()
        {
			double weight = 0.59375;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_20()
        {
			double weight = 0.625;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_21()
        {
			double weight = 0.65625;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_22()
        {
			double weight = 0.6875;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_23()
        {
			double weight = 0.71875;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_24()
        {
			double weight = 0.75;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_25()
        {
			double weight = 0.78125;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_26()
        {
			double weight = 0.8125;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_27()
        {
			double weight = 0.84375;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_28()
        {
			double weight = 0.875;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_29()
        {
			double weight = 0.90625;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_30()
        {
			double weight = 0.9375;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_31()
        {
			double weight = 0.96875;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }

        [TestMethod]
        public void Test_MixedCostIncrease_16_32()
        {
			double weight = 1;
			var text = "摘ムとにとし現に木同つ仲言消リお時立ら著現建系世すれ規い苔あたい種うっでをがはリィあく銭でこけい法にそ世伺で向い水びて次核る加いの成ジすな韻録例がらに王てジりなよやこと場る年の兼区生田リらベロフ般た輪軟の月治むど流就こ際アメれいるるじ言エの名務録千いりのし換がテ物す遺たされ数る接ト石この信るスジに生増たのあるでそ来商ン同いにう過テ産たりなの習用にはるは頭を国ャ有";
            var nodes = Tagger.Parse(text);
			var x = Bundle.MixedCost(weight, nodes);
			double cost = nodes[0].WCost * (1 - weight);
			for (int i = 1; i < nodes.Length; i++)
			{
				cost += Bundle.MixedCostIncrease(weight, nodes[i - 1], nodes[i]);
			}
			var y = (long)Math.Round(cost);
			Assert.AreEqual<long>(x, y, text);
        }


// Postamble

        private static Tagger<WNode> Tagger;

        private static DictionaryBundle<WNode> Bundle;

        [ClassInitialize]
        public static void ClassInitialize(TestContext context)
        {
            var dir = Path.GetDirectoryName(typeof(CostMethodsVariousCases).Assembly.Location);
            var dic_dir = Path.Combine(dir, "UniDic-CWJ");
            Tagger = Tagger<WNode>.Create(dic_dir);
			Bundle = Hack.GetDictionaries(Tagger);
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
			Bundle = null;
            Tagger?.Dispose();
            Tagger = null;
        }

		/// <summary>
        /// Expose BOS and EOS nodes in an array.
        /// </summary>
        /// <param name="nodes">A sequence of jointed nodes.</param>
        /// <returns>A new array of nodes containing BOS and EOS as its elements.</returns>
		/// <remarks>
		/// BOS and EOS nodes always present when a result of analysis is returned out of a lattice,
		/// though NMeCab hides them.  This method exposes them in an array.
		/// </remarks>
		private static WNode[] BosEos(IList<WNode> nodes)
		{
			var list = new List<WNode>();
			list.Add(nodes[0].Prev);
			list.AddRange(nodes);
			list.Add(nodes[nodes.Count - 1].Next);
			return list.ToArray();
		}
    }
}
