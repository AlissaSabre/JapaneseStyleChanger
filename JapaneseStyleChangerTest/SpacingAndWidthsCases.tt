<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	// Test cases
	var cases = new[]
	{
	//	id		source
	//			MS
	//			CG

		"0000",	"私たちが日常使用していることばは、一定のきまりにしたがって表現されています。",
				"私たちが日常使用していることばは、一定のきまりにしたがって表現されています。",
				"私たちが日常使用していることばは、一定のきまりにしたがって表現されています。",

		"0001",	"CoxとBekkerの報告によれば、ピアレビューシステムの重要性が高まっているという。",
				"Cox と Bekker の報告によれば、ピア レビュー システムの重要性が高まっているという。",
				"CoxとBekkerの報告によれば、ピアレビューシステムの重要性が高まっているという。",

		"0002",	"Cox と Bekker の報告によれば、ピア レビュー システムの重要性が高まっているという。",
				"Cox と Bekker の報告によれば、ピア レビュー システムの重要性が高まっているという。",
				"CoxとBekkerの報告によれば、ピアレビューシステムの重要性が高まっているという。",

		"0003",	"githubにも wikiとか issueとか、直接レポジトリーに関係しない機能がありますが、レポジトリー以外の機能が猛烈にたくさんあるんです。",
				"github にも wiki とか issue とか、直接レポジトリーに関係しない機能がありますが、レポジトリー以外の機能が猛烈にたくさんあるんです。",
				"githubにもwikiとかissueとか、直接レポジトリーに関係しない機能がありますが、レポジトリー以外の機能が猛烈にたくさんあるんです。",
	};

	// Support method(s)

	string GenerateName(string mode, string id)
	{
		return string.Format("Test_SW_{0}{1}", mode, id);
	}
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using NMeCab;
using NMeCab.Alissa;
using JapaneseStyleChanger;

namespace JapaneseStyleChangerTest
{
    [TestClass]
    public class SpacingAndWidthsCases : BaseClass
    {
		// Generated text cases.

<# for (int i = 0; i < cases.Length; i += 4) { string id = cases[i], source = cases[i + 1], ms = cases[i + 2], cg = cases[i + 3]; #>
        [TestMethod]
        public void <#= GenerateName("MS", id) #>()
        {
			var result = Rewrite("<#= source #>", CombineMode.MS);
			Assert.AreEqual("<#= ms #>", result, "Unexpected combined text.");
        }
        [TestMethod]
        public void <#= GenerateName("CG", id) #>()
        {
			var result = Rewrite("<#= source #>", CombineMode.CG);
			Assert.AreEqual("<#= cg #>", result, "Unexpected combined text.");
        }
<# } #>

		// Postamble

		[ClassInitialize]
		public new static void ClassInitialize(TestContext context)
        {
			BaseClass.ClassInitialize(context);
        }

		[ClassCleanup]
        public new static void ClassCleanup()
        {
			BaseClass.ClassCleanup();
		}

		static string Rewrite(string source, CombineMode mode)
		{
			var analysis = Tagger.Parse(source);
			Combiner.CombineMode = mode;
            var jotai = Combiner.Combine(analysis);
            return jotai;
		}
	}
}
