<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	// Postprocesses
	var posts = new[]
	{
		"null",									// 0: no postprocess
		"TokenCombiner.AsciiParentheses",		// 1
		"TokenCombiner.FullWidthParentheses",	// 2
	};

	// Test cases definition.
	var cases_stride = posts.Length + 1;
	var cases = new[]
	{
	//	id		source				1					2

		"0000",	"a (b) c",			"a (b) c",			"a（b）c",
		"0001",	"a（b）c",			"a (b) c",			"a（b）c",
		"0002",	"a [b] c",			"a [b] c",			"a［b］c",
		"0003",	"a［b］c",			"a [b] c",			"a［b］c",
		"0004",	"a {b} c",			"a {b} c",			"a｛b｝c",
		"0005",	"a｛b｝c",			"a {b} c",			"a｛b｝c",

		"0010",	") (",				") (",				"）（",
		"0011",	"）（",				") (",				"）（",
		"0012",	"] [",				"] [",				"］［",
		"0013",	"］［",				"] [",				"］［",
		"0014",	"} {",				"} {",				"｝｛",
		"0015",	"｝｛",				"} {",				"｝｛",

		"0020",	"a ((",				"a ((",				"a（（",
		"0021", "a（（",				"a ((",				"a（（",
		"0022",	"a [[",				"a [[",				"a［［",
		"0023", "a［［",				"a [[",				"a［［",
		"0024",	"a {{",				"a {{",				"a｛｛",
		"0025", "a｛｛",				"a {{",				"a｛｛",

		"0030", ")) b",				")) b",				"））b",
		"0031",	"））b",				")) b",				"））b",
		"0032", "]] b",				"]] b",				"］］b",
		"0033",	"］］b",				"]] b",				"］］b",
		"0034", "}} b",				"}} b",				"｝｝b",
		"0035",	"｝｝b",				"}} b",				"｝｝b",

		"0040",	"()",				"()",				"（）",
		"0041",	"（）",				"()",				"（）",
		"0042",	"[]",				"[]",				"［］",
		"0043",	"［］",				"[]",				"［］",
		"0044",	"{}",				"{}",				"｛｝",
		"0045",	"｛｝",				"{}",				"｛｝",

		"0050",	")。(",				")。(",				"）。（",
		"0051",	"）。（",			")。(",				"）。（",
		"0052",	"]。[",				"]。[",				"］。［",
		"0053",	"］。［",			"]。[",				"］。［",
		"0054",	"}。{",				"}。{",				"｝。｛",
		"0055",	"｝。｛",			"}。{",				"｝。｛",

		"0060",	")、(",				")、(",				"）、（",
		"0061",	"）、（",			")、(",				"）、（",
		"0062",	"]、[",				"]、[",				"］、［",
		"0063",	"］、［",			"]、[",				"］、［",
		"0064",	"}、{",				"}、{",				"｝、｛",
		"0065",	"｝、｛",			"}、{",				"｝、｛",
	};

	// Support Method(s).

	string Name(int post, string id)
	{
		return string.Format("Test_Combine_postprocess_{0:00}_{1}", post, id);
	}

#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using JapaneseStyleChanger;

namespace JapaneseStyleChangerTest
{
    [TestClass]
    public class TokenCombinerPostprocessCases
    {
		// Generated text cases.

<# for (int i = 0; i < cases.Length; i += cases_stride) { #>
<#   for (int post = 0; post < posts.Length; post++) { #>
<#     string id = cases[i]; #>
<#     string source = cases[i + 1]; #>
<#     string result = cases[i + 1 + post]; #>
<#     string postprocess = posts[post]; #>

        [TestMethod]
        public void <#= Name(post, id) #>()
        {
			var result = TokenCombiner.Combine("<#= source #>", postprocess: <#= postprocess #>);
			Assert.AreEqual("<#= result #>", result, "Unexpected combined text.");
        }

<#   } #>
<# } #>

	}
}
