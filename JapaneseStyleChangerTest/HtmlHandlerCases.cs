// <auto-generated>
// THIS FILE (HtmlHandlerCases.cs) IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using NMeCab;
using NMeCab.Alissa;
using JapaneseStyleChanger;

namespace JapaneseStyleChangerTest
{
    [TestClass]
    public class HtmlHandlerCases
    {
		// Generated cases.


		[TestMethod]
		public void Test_HtmlHandler_001()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "これはペンです";
			var clean = handler.GetCleanText();

			Assert.AreEqual("これはペンです", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.CleanNodes = nodes;
			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("これはペンです", updated_html, "updated html doesn't match");
        }

		[TestMethod]
		public void Test_HtmlHandler_002()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "<i>これは</i>ペンです";
			var clean = handler.GetCleanText();

			Assert.AreEqual("これはペンです", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.CleanNodes = nodes;
			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("<i>これは</i>ペンです", updated_html, "updated html doesn't match");
        }

		[TestMethod]
		public void Test_HtmlHandler_003()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "<i>これは<b>ペン</b>です</i>";
			var clean = handler.GetCleanText();

			Assert.AreEqual("これはペンです", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.CleanNodes = nodes;
			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("<i>これは<b>ペン</b>です</i>", updated_html, "updated html doesn't match");
        }

		[TestMethod]
		public void Test_HtmlHandler_004()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "<i></i>これは<i><b>ペン</b></i>です";
			var clean = handler.GetCleanText();

			Assert.AreEqual("これはペンです", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.CleanNodes = nodes;
			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("<i></i>これは<i><b>ペン</b></i>です", updated_html, "updated html doesn't match");
        }

		[TestMethod]
		public void Test_HtmlHandler_101()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "X&amp;Y";
			var clean = handler.GetCleanText();

			Assert.AreEqual("X&Y", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.CleanNodes = nodes;
			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("X&amp;Y", updated_html, "updated html doesn't match");
        }

		[TestMethod]
		public void Test_HtmlHandler_102()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "&lt;span&gt;";
			var clean = handler.GetCleanText();

			Assert.AreEqual("<span>", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.CleanNodes = nodes;
			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("&lt;span&gt;", updated_html, "updated html doesn't match");
        }

		[TestMethod]
		public void Test_HtmlHandler_103()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "&quot; and &apos;";
			var clean = handler.GetCleanText();

			Assert.AreEqual("\" and '", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.CleanNodes = nodes;
			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("\" and '", updated_html, "updated html doesn't match");
        }

		[TestMethod]
		public void Test_HtmlHandler_104()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "$&#32;$&#x20;$";
			var clean = handler.GetCleanText();

			Assert.AreEqual("$ $ $", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.CleanNodes = nodes;
			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("$ $ $", updated_html, "updated html doesn't match");
        }

		[TestMethod]
		public void Test_HtmlHandler_105()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "&Sigma;";
			var clean = handler.GetCleanText();

			Assert.AreEqual("Σ", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.CleanNodes = nodes;
			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("Σ", updated_html, "updated html doesn't match");
        }

		// Postamble

		private static Tagger<WNode> Tagger;

        [ClassInitialize]
        public static void ClassInitialize(TestContext context)
        {
			var dir = Path.GetDirectoryName(typeof(HtmlHandlerCases).Assembly.Location);
            var dic_dir = Path.Combine(dir, "UniDic-CWJ");
            Tagger = Tagger<WNode>.Create(() => new WNode(), dic_dir);
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
			Tagger.Dispose();
			Tagger = null;
        }
    }
}
