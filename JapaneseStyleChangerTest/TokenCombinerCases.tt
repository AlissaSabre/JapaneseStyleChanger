<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	// Test cases definition.
	var cases = new[]
	{
	//	id		source			MS					CG

		"0000",	"A",			"A",				"A",
		"0001",	"9",			"9",				"9",
		"0002",	"[",			"[",				"[",
		"0003",	"]",			"]",				"]",
		"0004",	"あ",			"あ",				"あ",
		"0005",	"（",			"（",				"（",
		"0006",	"。",			"。",				"。",

	//	id		source			MS					CG

		"0010",	"AA",			"AxA",				"AxA",
		"0011",	"A9",			"Ax9",				"Ax9",
		"0012",	"9A",			"9xA",				"9xA",
		"0013",	"99",			"9x9",				"9x9",

	//	Test cases below this line are copy-n-pasted
	//	from TokenCombinerCaseGenerator.txt,
	//	which in turn is produced from TokenCombinerCaseGenerator.tt.
	//	Expected strings (MS and CG) are edited manually after pasting. :)

	//	id		source			MS					CG

		"0100",	"あ9（.]9[.",	"あx9（.]x9x[.",		"あ9（.]x9x[.",
		"0101",	"あ9A.（9]（",	"あx9xA.（9]（",		"あ9xA.（9]（",
		"0102",	"[[A..9（A",		"[[A..x9（A",		"[[A..x9（A",
		"0103",	"9.AAあAあ（",	"9.xAxAxあxAxあ（",	"9.xAxAあAあ（",
		"0104",	"[（.[9]（A",	"[（.x[9]（A",		"[（.x[9]（A",
		"0105",	"[][].[あ（",	"[]x[].x[あ（",		"[]x[].x[あ（",
		"0106",	"A99あ.あ[[",	"Ax9x9xあ.xあx[[",	"Ax9x9あ.xあx[[",
		"0107",	"あ]A]A][[",		"あ]xA]xA]x[[",		"あ]xA]xA]x[[",
		"0108",	"あ99AA（[A",	"あx9x9xAxA（[A",	"あ9x9xAxA（[A",
		"0109",	"]9（.9あ]9",	"]x9（.x9xあ]x9",	"]x9（.x9あ]x9",
		"0110",	"（].][]あA",	"（].]x[]xあxA",		"（].]x[]xあA",
		"0111",	"9A（（[あ].",	"9xA（（[あ].",		"9xA（（[あ].",
		"0112",	"..]A[A[9",		"..]xAx[Ax[9",		"..]xAx[Ax[9",
		"0113",	"（9[（あ.（[",	"（9x[（あ.（[",		"（9x[（あ.（[",
		"0114",	"A]（あ[.9]",	"A]（あx[.x9]",		"A]（あx[.x9]",
		"0115",	".AA..あ（]",	".xAxA..xあ（]",		".xAxA..xあ（]",
		"0116",	"A9.あ.A（あ",	"Ax9.xあ.xA（あ",	"Ax9.xあ.xA（あ",
		"0117",	"9あA[（A9[",	"9xあxAx[（Ax9x[",	"9あAx[（Ax9x[",
		"0118",	"[9.[.（（（",	"[9.x[.（（（",		"[9.x[.（（（",
		"0119",	"]]ああ[あああ",	"]]xああx[あああ",	"]]xああx[あああ",
		"0120",	"Aあ]]あ（99",	"Axあ]]xあ（9x9",	"Aあ]]xあ（9x9",
		"0121",	"]]（]AAAA",		"]]（]xAxAxAxA",		"]]（]xAxAxAxA",
	
	//	id		source			MS					CG

		"0200",	"A（あ]あ[（",	"A（あ]xあx[（",		"A（あ]xあx[（",
		"0201",	"[あ（（]（A",	"[あ（（]（A",		"[あ（（]（A",
		"0202",	"（（[[]）あ",	"（（[[]）あ",		"（（[[]）あ",
		"0203",	"（（[（あ（あ",	"（（[（あ（あ",		"（（[（あ（あ",
		"0204",	"）A]]A（A",		"）A]]xA（A",		"）A]]xA（A",
		"0205",	"[ああAA（[",	"[ああxAxA（[",		"[ああAxA（[",
		"0206",	"]））A）[）",	"]））A）[）",		"]））A）[）",
		"0207",	"あA）[[あA",	"あxA）[[あxA",		"あA）[[あA",
		"0208",	"]]あ）（]あ",	"]]xあ）（]xあ",		"]]xあ）（]xあ",
		"0209",	"あ（A][][",		"あ（A]x[]x[",		"あ（A]x[]x[",
		"0210",	"）ああ[[AA",	"）ああx[[AxA",		"）ああx[[AxA",
		"0211",	"（））]][）",	"（））]]x[）",		"（））]]x[）",
		"0212",	"あ]（]（）あ",	"あ]（]（）あ",		"あ]（]（）あ",
		"0213",	"A]A[（）]",		"A]xAx[（）]",		"A]xAx[（）]",
		"0214",	"あ]A[AAあ",		"あ]xAx[AxAxあ",		"あ]xAx[AxAあ",
		"0215",	"）Aあ））（[",	"）Axあ））（[",		"）Aあ））（[",
		"0216",	"）（A）]）[",	"）（A）]）[",		"）（A）]）[",
		"0217",	"[Aああ[）A",	"[Axああx[）A",		"[Aああx[）A",
		"0218",	"あ）[]A[A",		"あ）[]xAx[A",		"あ）[]xAx[A",

	//	id		source			MS					CG

		"0300",	"あキキA。。",	"あキxキxA。。",		"あキキA。。",
		"0301",	"キ.BあAあ",		"キ.xBxあxAxあ",		"キ.xBあAあ",
		"0302",	"。キBBキA",		"。キxBxBxキxA",		"。キBxBキA",
		"0303",	"キキあ..カ",	"キxキあ..xカ",		"キキあ..xカ",
		"0304",	"AB。キキあ",	"AxB。キxキあ",		"AxB。キキあ",
		"0305",	"カキカBキ。",	"カxキxカxBxキ。",	"カキカBキ。",
		"0306",	"あカ。A.A",		"あカ。A.xA",		"あカ。A.xA",
		"0307",	"あ。BAあB",		"あ。BxAxあxB",		"あ。BxAあB",
		"0308",	"ああカあBあ",	"ああカあxBxあ",		"ああカあBあ",
		"0309",	"。キカカ.キ",	"。キxカxカ.xキ",	"。キカカ.xキ",
		"0310",	"A。.。.B",		"A。.。.xB",			"A。.。.xB",
		"0311",	"カ。B。Aカ",	"カ。B。Axカ",		"カ。B。Aカ",
		"0312",	"A.あ.。カ",		"A.xあ.。カ",		"A.xあ.。カ",
		"0313",	"B.カAキB",		"B.xカxAxキxB",		"B.xカAキB",
		"0314",	"カAカ。。あ",	"カxAxカ。。あ",		"カAカ。。あ",
		"0315",	"ABあB。あ",		"AxBxあxB。あ",		"AxBあB。あ",
		"0316",	"。ああ。カ.",	"。ああ。カ.",		"。ああ。カ.",
		"0317",	"Bカキあ.カ",	"Bxカxキあ.xカ",		"Bカキあ.xカ",
		"0318",	"あカBBキA",		"あカxBxBxキxA",		"あカBxBキA",
		"0319",	"AB.キ..",		"AxB.xキ..",			"AxB.xキ..",
		"0320",	"AあA。。A",		"AxあxA。。A",		"AあA。。A",
		"0321",	"カあキ。カあ",	"カあキ。カあ",		"カあキ。カあ",
		"0322",	".キ.あ。.",		".xキ.xあ。.",		".xキ.xあ。.",
		"0323",	"BAキ。BB",		"BxAxキ。BxB",		"BxAキ。BxB",
		"0324",	".AAAカキ",		".xAxAxAxカxキ",		".xAxAxAカキ",
		"0325",	"BカA..B",		"BxカxA..xB",		"BカA..xB",
		"0326",	".。.ああキ",	".。.xああキ",		".。.xああキ",
		"0327",	"カカB.AA",		"カxカxB.xAxA",		"カカB.xAxA",
		"0328",	"カ.カカキカ",	"カ.xカxカxキxカ",	"カ.xカカキカ",
		"0329",	"キBカAキあ",	"キxBxカxAxキあ",	"キBカAキあ",
		"0330",	"あABAAA",		"あxAxBxAxAxA",		"あAxBxAxAxA",

	};

	// Support Method(s).

	string GenerateName(string mode, string id)
	{
		return string.Format("Test_Combine_{0}{1}", mode, id);
	}

#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using JapaneseStyleChanger;

namespace JapaneseStyleChangerTest
{
    [TestClass]
    public class TokenCombinerCases
    {
		// Generated text cases.

<# for (int i = 0; i < cases.Length; i += 4) { string id = cases[i], source = cases[i + 1], ms = cases[i + 2], cg = cases[i + 3]; #>
        [TestMethod]
        public void <#= GenerateName("MS", id) #>()
        {
			Combiner.CombineMode = CombineMode.MS;
			Combiner.Space = "x";
			var result = Combiner.Combine("<#= source #>");
			Assert.AreEqual("<#= ms #>", result, "Unexpected combined text.");
        }
        [TestMethod]
        public void <#= GenerateName("CG", id) #>()
        {
			Combiner.CombineMode = CombineMode.CG;
			Combiner.Space = "x";
			var result = Combiner.Combine("<#= source #>");
			Assert.AreEqual("<#= cg #>", result, "Unexpected combined text.");
        }
<# } #>

		// Postamble

		protected static TokenCombiner<char> Combiner;

		[ClassInitialize]
        public static void ClassInitialize(TestContext context)
        {
			Combiner = new TokenCombiner<char>(ch => ch.ToString(), ch => true);
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
			Combiner = null;
        }
	}
}
