<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	int case_stride = 1;

	var cases = new[]
	{
		//	ID		HTML									Clean
		Def("001",	"これはペンです",							"これはペンです"	),
		Def("002",	"<i>これは</i>ペンです",					"これはペンです"	),
		Def("003",	"<i>これは<b>ペン</b>です</i>",			"これはペンです"	),
		Def("004",	"<i></i>これは<i><b>ペン</b></i>です",	"これはペンです"	),

		//	ID		HTML						Clean						Rebuilt
		Def("101",	"X&amp;Y",					"X&Y",						"X&amp;Y"		),
		Def("102",	"&lt;span&gt;",				"<span>",					"&lt;span&gt;"	),
		Def("103",	"&quot; and &apos;",		"\\\" and '",				"\\\" and '"	),
		Def("104",	"$&#32;$&#x20;$",			"$ $ $",					"$ $ $"			),
		Def("105",	"&Sigma;",					"Σ",						"Σ"				),

		//	ID		HTML						Clean
		Def("201",	"<i>a</i>",					"a"		),
		Def("202",	"<i> a </i>",				" a "	),
		Def("203",	"<i> <i> </i> a </i>",		"   a "	),
	};

	// support functions

	string[] Def(string id, string html, string clean, string rebuilt = null)
	{
		return new[] { id, html, clean, rebuilt ?? html };
	}

	string Name(int i) => $"Test_HtmlHandler_{cases[i][0]}";

	string Html(int i) => cases[i][1];
	string Clean(int i) => cases[i][2];
	string Rebuilt(int i) => cases[i][3];

#>
// <auto-generated>
// THIS FILE (HtmlHandlerCases.cs) IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using NMeCab;
using NMeCab.Alissa;
using JapaneseStyleChanger;

namespace JapaneseStyleChangerTest
{
    [TestClass]
    public class HtmlHandlerCases
    {
		// Generated cases.

<# for (int i = 0; i < cases.Length; i += case_stride) { #>

		[TestMethod]
		public void <#= Name(i) #>()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "<#= Html(i) #>";
			var clean = handler.GetCleanText();

			Assert.AreEqual("<#= Clean(i) #>", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.CleanNodes = nodes;
			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("<#= Rebuilt(i) #>", updated_html, "updated html doesn't match");
        }
<# } #>

		// Postamble

		private static Tagger<WNode> Tagger;

        [ClassInitialize]
        public static void ClassInitialize(TestContext context)
        {
			var dir = Path.GetDirectoryName(typeof(HtmlHandlerCases).Assembly.Location);
            var dic_dir = Path.Combine(dir, "UniDic-CWJ");
            Tagger = Tagger<WNode>.Create(() => new WNode(), dic_dir);
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
			Tagger.Dispose();
			Tagger = null;
        }
    }
}
