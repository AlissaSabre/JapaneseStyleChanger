<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	int case_stride = 1;

	var cases = new[]
	{
		//	ID		HTML									Clean
		Def("001",	"これはペンです",							"これはペンです"	),
		Def("002",	"<i>これは</i>ペンです",					"これはペンです"	),
		Def("003",	"<i>これは<b>ペン</b>です</i>",			"これはペンです"	),
		Def("004",	"<i></i>これは<i><b>ペン</b></i>です",	"これはペンです"	),

		//	ID		HTML						Clean						Rebuilt
		Def("101",	"X&amp;Y",					"X&Y",						"X&amp;Y"		),
		Def("102",	"&lt;span&gt;",				"<span>",					"&lt;span&gt;"	),
		Def("103",	"&quot; and &apos;",		"\" and '",					"\" and '"		),
		Def("104",	"$&#32;$&#x20;$",			"$ $ $",					"$ $ $"			),
		Def("105",	"&Sigma;",					"Σ",						"Σ"				),

		//	ID		HTML			Clean
		DeX("111",	"&#9;",			"\t"		),
		DeX("112",	"&#10;",		"\n"		),
		DeX("113",	"&#12;",		"\f"		),
		DeX("114",	"&#33;",		"!"			),
		DeX("115",	"&#99;",		"c"			),
		DeX("116",	"&#100;",		"d"			),
		DeX("117",	"&#999;",		"\u03E7"	),
		DeX("118",	"&#1000;",		"\u03E8"	),
		DeX("119",	"&#9999;",		"\u270F"	),
		DeX("120",	"&#10000;",		"\u2710"	),
		DeX("121",	"&#99999;",		"\U0001869F"	),
		DeX("122",	"&#100000;",	"\U000186A0"	),
		DeX("123",	"&#999999;",	"\U000F423F"	),
		DeX("124",	"&#1000000;",	"\U000F4240"	),

		//	ID		HTML			Clean
		DeX("131",	"&#65533;",		"\uFFFD"		),
		DeX("132",	"&#65536;",		"\U00010000"	),
		DeX("133",	"&#131069;",	"\U0001FFFD"	),
		DeX("134",	"&#131072;",	"\U00020000"	),
		DeX("135",	"&#196605;",	"\U0002FFFD"	),
		DeX("136",	"&#196608;",	"\U00030000"	),
		DeX("137",	"&#262141;",	"\U0003FFFD"	),
		DeX("138",	"&#262144;",	"\U00040000"	),
		DeX("139",	"&#327677;",	"\U0004FFFD"	),
		DeX("140",	"&#327680;",	"\U00050000"	),
		DeX("141",	"&#393213;",	"\U0005FFFD"	),
		DeX("142",	"&#393216;",	"\U00060000"	),
		DeX("143",	"&#458749;",	"\U0006FFFD"	),
		DeX("144",	"&#458752;",	"\U00070000"	),
		DeX("145",	"&#524285;",	"\U0007FFFD"	),
		DeX("146",	"&#524288;",	"\U00080000"	),
		DeX("147",	"&#589821;",	"\U0008FFFD"	),
		DeX("148",	"&#589824;",	"\U00090000"	),
		DeX("149",	"&#655357;",	"\U0009FFFD"	),
		DeX("150",	"&#655360;",	"\U000A0000"	),
		DeX("151",	"&#720893;",	"\U000AFFFD"	),
		DeX("152",	"&#720896;",	"\U000B0000"	),
		DeX("153",	"&#786429;",	"\U000BFFFD"	),
		DeX("154",	"&#786432;",	"\U000C0000"	),
		DeX("155",	"&#851965;",	"\U000CFFFD"	),
		DeX("156",	"&#851968;",	"\U000D0000"	),
		DeX("157",	"&#917501;",	"\U000DFFFD"	),
		DeX("158",	"&#917504;",	"\U000E0000"	),
		DeX("159",	"&#983037;",	"\U000EFFFD"	),
		DeX("160",	"&#983040;",	"\U000F0000"	),
		DeX("161",	"&#1048573;",	"\U000FFFFD"	),
		DeX("162",	"&#1048576;",	"\U00100000"	),
		DeX("163",	"&#1114109;",	"\U0010FFFD"	),

		//	ID		HTML			Clean
		DeX("211",	"&#x9;",		"\t"		),
		DeX("212",	"&#xA;",		"\n"		),
		DeX("213",	"&#xC;",		"\f"		),
		DeX("214",	"&#x09;",		"\t"		),
		DeX("215",	"&#x0A;",		"\n"		),
		DeX("216",	"&#x0C;",		"\f"		),
		DeX("217",	"&#x20;",		" "			),
		DeX("218",	"&#x0009;",		"\t"		),
		DeX("219",	"&#x000A;",		"\n"		),
		DeX("220",	"&#x000C;",		"\f"		),
		DeX("221",	"&#x0020;",		" "			),
		DeX("222",	"&#x00FF;",		"\u00FF"	),
		DeX("223",	"&#x0100;",		"\u0100"	),
		DeX("224",	"&#x0FFF;",		"\u0FFF"	),
		DeX("225",	"&#x1000;",		"\u1000"	),
		DeX("226",	"&#xD7FF;",		"\uD7FF"	),
		DeX("227",	"&#xC000;",		"\uC000"	),
		DeX("228",	"&#xFFFD;",		"\uFFFD"	),
		DeX("229",	"&#x10000;",	"\U00010000"	),
		DeX("230",	"&#x1FFFD;",	"\U0001FFFD"	),
		DeX("231",	"&#x20000;",	"\U00020000"	),
		DeX("232",	"&#x2FFFD;",	"\U0002FFFD"	),
		DeX("233",	"&#x30000;",	"\U00030000"	),
		DeX("234",	"&#x3FFFD;",	"\U0003FFFD"	),
		DeX("235",	"&#x40000;",	"\U00040000"	),
		DeX("236",	"&#x4FFFD;",	"\U0004FFFD"	),
		DeX("237",	"&#x50000;",	"\U00050000"	),
		DeX("238",	"&#x5FFFD;",	"\U0005FFFD"	),
		DeX("239",	"&#x60000;",	"\U00060000"	),
		DeX("240",	"&#x6FFFD;",	"\U0006FFFD"	),
		DeX("241",	"&#x70000;",	"\U00070000"	),
		DeX("242",	"&#x7FFFD;",	"\U0007FFFD"	),
		DeX("243",	"&#x80000;",	"\U00080000"	),
		DeX("244",	"&#x8FFFD;",	"\U0008FFFD"	),
		DeX("245",	"&#x90000;",	"\U00090000"	),
		DeX("246",	"&#x9FFFD;",	"\U0009FFFD"	),
		DeX("247",	"&#xA0000;",	"\U000A0000"	),
		DeX("248",	"&#xAFFFD;",	"\U000AFFFD"	),
		DeX("249",	"&#xB0000;",	"\U000B0000"	),
		DeX("250",	"&#xBFFFD;",	"\U000BFFFD"	),
		DeX("251",	"&#xC0000;",	"\U000C0000"	),
		DeX("252",	"&#xCFFFD;",	"\U000CFFFD"	),
		DeX("253",	"&#xD0000;",	"\U000D0000"	),
		DeX("254",	"&#xDFFFD;",	"\U000DFFFD"	),
		DeX("255",	"&#xE0000;",	"\U000E0000"	),
		DeX("256",	"&#xEFFFD;",	"\U000EFFFD"	),
		DeX("257",	"&#xF0000;",	"\U000F0000"	),
		DeX("258",	"&#xFFFFD;",	"\U000FFFFD"	),
		DeX("259",	"&#x100000;",	"\U00100000"	),
		DeX("260",	"&#x10FFFD;",	"\U0010FFFD"	),

		//	ID		HTML			Clean
		DeX("311",	"&#X9;",		"\t"		),
		DeX("312",	"&#XA;",		"\n"		),
		DeX("313",	"&#XC;",		"\f"		),
		DeX("314",	"&#X09;",		"\t"		),
		DeX("315",	"&#X0A;",		"\n"		),
		DeX("316",	"&#X0C;",		"\f"		),
		DeX("317",	"&#X20;",		" "			),
		DeX("318",	"&#X0009;",		"\t"		),
		DeX("319",	"&#X000A;",		"\n"		),
		DeX("320",	"&#X000C;",		"\f"		),
		DeX("321",	"&#X0020;",		" "			),
		DeX("322",	"&#X00FF;",		"\u00FF"	),
		DeX("323",	"&#X0100;",		"\u0100"	),
		DeX("324",	"&#X0FFF;",		"\u0FFF"	),
		DeX("325",	"&#X1000;",		"\u1000"	),
		DeX("326",	"&#XD7FF;",		"\uD7FF"	),
		DeX("327",	"&#XC000;",		"\uC000"	),
		DeX("328",	"&#XFFFD;",		"\uFFFD"	),
		DeX("329",	"&#X10000;",	"\U00010000"	),
		DeX("330",	"&#X1FFFD;",	"\U0001FFFD"	),
		DeX("331",	"&#X20000;",	"\U00020000"	),
		DeX("332",	"&#X2FFFD;",	"\U0002FFFD"	),
		DeX("333",	"&#X30000;",	"\U00030000"	),
		DeX("334",	"&#X3FFFD;",	"\U0003FFFD"	),
		DeX("335",	"&#X40000;",	"\U00040000"	),
		DeX("336",	"&#X4FFFD;",	"\U0004FFFD"	),
		DeX("337",	"&#X50000;",	"\U00050000"	),
		DeX("338",	"&#X5FFFD;",	"\U0005FFFD"	),
		DeX("339",	"&#X60000;",	"\U00060000"	),
		DeX("340",	"&#X6FFFD;",	"\U0006FFFD"	),
		DeX("341",	"&#X70000;",	"\U00070000"	),
		DeX("342",	"&#X7FFFD;",	"\U0007FFFD"	),
		DeX("343",	"&#X80000;",	"\U00080000"	),
		DeX("344",	"&#X8FFFD;",	"\U0008FFFD"	),
		DeX("345",	"&#X90000;",	"\U00090000"	),
		DeX("346",	"&#X9FFFD;",	"\U0009FFFD"	),
		DeX("347",	"&#XA0000;",	"\U000A0000"	),
		DeX("348",	"&#XAFFFD;",	"\U000AFFFD"	),
		DeX("349",	"&#XB0000;",	"\U000B0000"	),
		DeX("350",	"&#XBFFFD;",	"\U000BFFFD"	),
		DeX("351",	"&#XC0000;",	"\U000C0000"	),
		DeX("352",	"&#XCFFFD;",	"\U000CFFFD"	),
		DeX("353",	"&#XD0000;",	"\U000D0000"	),
		DeX("354",	"&#XDFFFD;",	"\U000DFFFD"	),
		DeX("355",	"&#XE0000;",	"\U000E0000"	),
		DeX("356",	"&#XEFFFD;",	"\U000EFFFD"	),
		DeX("357",	"&#XF0000;",	"\U000F0000"	),
		DeX("358",	"&#XFFFFD;",	"\U000FFFFD"	),
		DeX("359",	"&#X100000;",	"\U00100000"	),
		DeX("360",	"&#X10FFFD;",	"\U0010FFFD"	),

		//	ID		HTML						Clean
		Def("401",	"<i>a</i>",					"a"		),
		Def("402",	"<i> a </i>",				" a "	),
		Def("403",	"<i> <i> </i> a </i>",		"   a "	),
	};

	// support functions

	string[] Def(string id, string html, string clean, string rebuilt = null)
	{
		return new[] { id, html, clean, rebuilt ?? html };
	}

	string[] DeX(string id, string html, string clean)
	{
		return Def(id, html, clean, clean);
	}

	string Name(int i) => $"Test_HtmlHandler_{cases[i][0]}";

	string Html(int i) => escape(cases[i][1]);
	string Clean(int i) => escape(cases[i][2]);
	string Rebuilt(int i) => escape(cases[i][3]);

	var SimpleEscapeControls = new[] { 'a', 'b', 't', 'n', 'v', 'f', 'r' };

	string escape(string s)
	{
		var sb = new StringBuilder();
		foreach (var c in s)
		{
			if (c == '"' || c == '\'' || c == '\\')
			{
				sb.Append('\\').Append(c);
			}
			else if (c >= 32)
			{
				sb.Append(c);
			}
			else if (c >= 7 && c <= 13)
			{
				sb.Append('\\').Append(SimpleEscapeControls[c - 7]);
			}
			else if (c == 0)
			{
				sb.Append("\\0");
			}
			else
			{
				sb.AppendFormat("\\u{0:X4}", c);
			}
		}
		return sb.ToString();
	}

#>
// <auto-generated>
// THIS FILE (HtmlHandlerCases.cs) IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using NMeCab;
using NMeCab.Alissa;
using JapaneseStyleChanger;

namespace JapaneseStyleChangerTest
{
    [TestClass]
    public class HtmlHandlerCases
    {
		// Generated cases.

<# for (int i = 0; i < cases.Length; i += case_stride) { #>

		[TestMethod]
		public void <#= Name(i) #>()
		{
			var handler = new HtmlHandler();
			
			handler.OriginalHtml = "<#= Html(i) #>";
			var clean = handler.GetCleanText();

			Assert.AreEqual("<#= Clean(i) #>", clean, "clean text doesn't match");

			var nodes = Tagger.Parse(clean);

			handler.UpdatedNodes = nodes;
			handler.UpdatedText = clean;
			var updated_html = handler.GetUpdatedHtml();

			Assert.AreEqual("<#= Rebuilt(i) #>", updated_html, "updated html doesn't match");
        }
<# } #>

		// Postamble

		private static Tagger<WNode> Tagger;

        [ClassInitialize]
        public static void ClassInitialize(TestContext context)
        {
			var dir = Path.GetDirectoryName(typeof(HtmlHandlerCases).Assembly.Location);
            var dic_dir = Path.Combine(dir, "UniDic-CWJ");
            Tagger = Tagger<WNode>.Create(() => new WNode(), dic_dir);
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
			Tagger.Dispose();
			Tagger = null;
        }
    }
}
