<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var case_stride = 4;

	var cases = new[]
	{//	ID		Input									CG spacing								MS spacing

		"001",	"赤い花が咲いています。",					"赤い花が咲いている。",					"赤い花が咲いている。",
		"002",	"<i>赤い花が咲いています。</i>",			"<i>赤い花が咲いている。</i>",			"<i>赤い花が咲いている。</i>",
		"003",	"<i>赤い</i>花が咲いています。",			"<i>赤い</i>花が咲いている。",			"<i>赤い</i>花が咲いている。",
		"004",	"赤い<i>花が</i>咲いています。",			"赤い<i>花が</i>咲いている。",			"赤い<i>花が</i>咲いている。",
		"005",	"赤い花が<i>咲いています</i>。",			"赤い花が<i>咲いている</i>。",			"赤い花が<i>咲いている</i>。",
		"006",	"赤い花が<i>咲いて</i>います。",			"赤い花が<i>咲いて</i>いる。",			"赤い花が<i>咲いて</i>いる。",
		"007",	"赤い花が咲いて<i>います</i>。",			"赤い花が咲いて<i>いる</i>。",			"赤い花が咲いて<i>いる</i>。",
		"008",	"赤い花が咲いて<i>い</i>ます。",			"赤い花が咲いて<i>いる</i>。",			"赤い花が咲いて<i>いる</i>。",
		"009",	"赤い花が咲いてい<i>ます</i>。",			"赤い花が咲いている<i></i>。",			"赤い花が咲いている<i></i>。",

		"011",	"赤い花が咲いています。",					"赤い花が咲いている。",					"赤い花が咲いている。",
		"012",	"<i><b>赤い花が咲いています。</b></i>",	"<i><b>赤い花が咲いている。</b></i>",		"<i><b>赤い花が咲いている。</b></i>",
		"013",	"<i><b>赤い</b></i>花が咲いています。",	"<i><b>赤い</b></i>花が咲いている。",		"<i><b>赤い</b></i>花が咲いている。",
		"014",	"赤い<i><b>花が</b></i>咲いています。",	"赤い<i><b>花が</b></i>咲いている。",		"赤い<i><b>花が</b></i>咲いている。",
		"015",	"赤い花が<i><b>咲いています</b></i>。",	"赤い花が<i><b>咲いている</b></i>。",		"赤い花が<i><b>咲いている</b></i>。",

		"021",	"<i>花です</i>。",						"<i>花だ</i>。",							"<i>花だ</i>。",
		"022",	"花<i>です</i>。",						"花<i>だ</i>。",							"花<i>だ</i>。",
		"023",	"花で<i>す</i>。",						"花だ<i></i>。",							"花だ<i></i>。",
		"024",	"<i>花でした</i>。",						"<i>花だった</i>。",						"<i>花だった</i>。",
		"025",	"花<i>でした</i>。",						"花<i>だった</i>。",						"花<i>だった</i>。",
		"026",	"花で<i>した</i>。",						"花だっ<i>た</i>。",						"花だっ<i>た</i>。",
		"027",	"花で<i>し</i>た。",						"花だっ<i></i>た。",						"花だっ<i></i>た。",
		"028",	"花でし<i>た</i>。",						"花だっ<i>た</i>。",						"花だっ<i>た</i>。",

		"031",	"<i>その2日後</i>",						"<i>その2日後</i>",						"<i>その 2 日後</i>",
		"032",	"<i>その 2 日後</i>",					"<i>その2日後</i>",						"<i>その 2 日後</i>",
		"033",	"その<i>2</i>日後",						"その<i>2</i>日後",						"その <i>2</i> 日後",
		"034",	"その <i>2</i> 日後",					"その<i>2</i>日後",						"その <i>2</i> 日後",
		"035",	"その<i> 2 </i>日後",					"その<i>2</i>日後",						"その<i> 2 </i>日後",
		"036",	"その<i>2日</i>後",						"その<i>2日</i>後",						"その <i>2 日</i>後",
		"037",	"その <i>2 日</i>後",					"その<i>2日</i>後",						"その <i>2 日</i>後",
		"038",	"その<i> 2 日</i>後",					"その<i>2日</i>後",						"その<i> 2 日</i>後",
	};

	// support functions

	string Name(int i) => $"Html_{cases[i + 0]}";

	string In(int i) => cases[i + 1];
	string Cg(int i) => cases[i + 2];
	string Ms(int i) => cases[i + 3];

#>
// <auto-generated>
// THIS FILE (HtmlCases.cs) IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using NMeCab;
using NMeCab.Alissa;
using JapaneseStyleChanger;

namespace JapaneseStyleChangerTest
{
    [TestClass]
    public class HtmlCases
    {
		// Generated cases.

<# for (int i = 0; i < cases.Length; i += case_stride) { #>

		[TestMethod]
		public void <#= Name(i) #>_CG()
		{
			var result = ConvertText("<#= In(i) #>", CombineMode.CG);
			Assert.AreEqual("<#= Cg(i) #>", result, "Unexpected CG text.");
        }

        [TestMethod]
        public void <#= Name(i) #>_MS()
        {
			var result = ConvertText("<#= In(i) #>", CombineMode.MS);
			Assert.AreEqual("<#= Ms(i) #>", result, "Unexpected MS text.");
		}
<# } #>

		// Postamble

		private static TextStyleChanger Changer;

        [ClassInitialize]
        public static void ClassInitialize(TestContext context)
        {
			Changer = new TextStyleChanger
			{
				ChangeToJotai = true,
				HtmlSyntax = true,
			};
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
			Changer.Dispose();
			Changer = null;
        }

        private static string ConvertText(string text, CombineMode mode)
        {
	        Changer.CombineMode = mode;
			return Changer.ChangeText(text);
        }
    }
}
