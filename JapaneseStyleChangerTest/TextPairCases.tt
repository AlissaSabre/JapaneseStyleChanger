<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	// _Real_ test cases definition.
	var cases = new[]
	{
		"書きます",			"書く",
		"見ます",			"見る",
		"食べます",			"食べる",
		"読みます",			"読む",
		"貼ります",			"貼る",

		"書きましょう",		"書こう",
		"見ましょう",		"見よう",
		"食べましょう",		"食べよう",
		"読みましょう",		"読もう",
		"貼りましょう",		"貼ろう",

		"書きません",		"書かない",
		"見ません",			"見ない",
		"食べません",		"食べない",
		"読みません",		"読まない",
		"貼りません",		"貼らない",

		"ありません",		"ない",
		"ありませんでした",	"なかった",

		"読みませんでした",	"読まなかった",
		"読めませんでした",	"読めなかった",
		"読ませませんでした",	"読ませなかった",

		"どうでしょうか",	"どうだろうか",

		"欲しいです",		"欲しい",
		"欲しかったです",		"欲しかった",
		"欲しそうです",		"欲しそうだ",
		"欲しくありません",	"欲しくない",
		"欲しくないです",		"欲しくない",
		"読みたいです",		"読みたい",

		"好きです",			"好きだ",
		"好きでした",		"好きだった",
		"好きでしょう",		"好きだろう",

		"終わりましたら",	"終わったら",
		"書きましたら",		"書いたら",
		"見ましたら",		"見たら",
		"食べましたら",		"食べたら",
		"読みましたら",		"読んだら",
		"貼りましたら",		"貼ったら",

		"見てあげます",		"見てあげる",
		"見てあげてるんです",	"見てあげてるんだ",

		"本です",			"本だ",
		"本でしょう",		"本だろう",
		"本でした",			"本だった",
		"僕のです",			"僕のだ",
		"僕のでしょう",		"僕のだろう",
		"僕のでした",		"僕のだった",
		"静かです",			"静かだ",
		"静かでしょう",		"静かだろう",
		"静かでした",		"静かだった",
		"読みそうです",		"読みそうだ",
		"読みそうでしょう",	"読みそうだろう",
		"読みそうでした",	"読みそうだった",
		"来るようです",		"来るようだ",
		"来るようでしょう",	"来るようだろう",
		"来るようでした",	"来るようだった",
		"美しいでしょう",	"美しいだろう",
		"雨が降るでしょう",	"雨が降るだろう",
		"寒いでしょう",		"寒いだろう",
		"困らせるでしょう",	"困らせるだろう",
		"行うでしょう",		"行うだろう",

		"行かないです",		"行かない",
		"行きたいです",		"行きたい",
		"行くらしいです",	"行くらしい",
		"行かないでしょう",	"行かないだろう",
		"行きたいでしょう",	"行きたいだろう",
		"行くらしいでしょう",	"行くらしいだろう",
		"冬らしいでしょう",	"冬らしいだろう",

		"書くでしょう",		"書くだろう",
		"見るでしょう",		"見るだろう",
		"食べるでしょう",	"食べるだろう",
		"読むでしょう",		"読むだろう",
		"貼るでしょう",		"貼るだろう",
		"書いたでしょう",	"書いただろう",
		"見たでしょう",		"見ただろう",
		"食べたでしょう",	"食べただろう",
		"読んだでしょう",	"読んだだろう",
		"貼ったでしょう",	"貼っただろう",

	};

	// Support method(s).

	string GenerateName(string ketai, int i)
	{
		var sb = new StringBuilder();
		sb.AppendFormat("Test_JT_{0:0000}_", i);
		foreach (var c in ketai)
		{
			sb.Append(char.IsLetterOrDigit(c) ? c : '_');
		}
		return sb.ToString();
	}

#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using NMeCab;
using NMeCab.Alissa;
using JapaneseStyleChanger;

namespace JapaneseStyleChangerTest
{
    [TestClass]
    public class TextPairCases
    {
		// Generated text cases.

<# for (int i = 0; i < cases.Length; i += 2) { string ketai = cases[i], jotai = cases[i + 1]; #>
        [TestMethod]
        public void <#= GenerateName(ketai, i / 2) #>()
        {
			var result = ConvertText("<#= ketai #>");
			Assert.AreEqual("<#= jotai #>", result, "Unexpected jotai text.");
        }
<# } #>

		// Postamble

		private static TextStyleChanger Changer;

        [ClassInitialize]
        public static void ClassInitialize(TestContext context)
        {
			Changer = new TextStyleChanger
			{
				ChangeToJotai = true,
			};
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
			Changer.Dispose();
			Changer = null;
        }

        private static string ConvertText(string ketai)
        {
			return Changer.ChangeText(ketai);
        }
    }
}
