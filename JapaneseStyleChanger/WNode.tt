<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

	var members = new []
	{
		//	  Column	Type			Name			Summary in XML comment
		new { C = 0,	T = "string",	N = "Pos1",		S = "1st classification of part of speech." },
		new { C = 1,	T = "string",	N = "Pos2",		S = "2nd classification of part of speech." },
		new { C = 2,	T = "string",	N = "Pos3",		S = "3rd classification of part of speech." },
		new { C = 3,	T = "string",	N = "Pos4",		S = "4th classificaiton of part of speech." },
		new { C = 4,	T = "string",	N = "CType",	S = "Conjugation type." },
		new { C = 5,	T = "string",	N = "CForm",	S = "Conjugation form." },
		new { C = 7,	T = "string",	N = "Lemma",	S = "Lemma." },
		new { C = 8,	T = "string",	N = "Orth",		S = "Written text." },
		new { C = 10,	T = "string",	N = "OrthBase",	S = "Base form of written text." },
		new { C = 27,	T = "long",		N = "Lid",		S = "ID in the master table." },
		new { C = 28,	T = "int",		N = "Lemma_id",	S = "Unique ID of Lemma." },
	};

	string Load(int column, string type)
	{
		switch (type)
		{
			case "string":	return $"features[{column}]";
			case "int":
			case "long":	return $"{type}.Parse(features[{column}])";
			default:
				throw new ApplicationException("Invalid type name");
		}
	}

	string DefaultFeatureValue(string type)
	{
		switch (type)
		{
			case "string":	return "string.Empty";
			case "int":
			case "long":	return "0";
			default:
				throw new ApplicationException("Invalid type name");
		}
	}

	string[] MeCabNodeStatMembers =
	{
        "Nor",
        "Unk",
        "Bos",
        "Eos",
	};
#>
// <auto-generated>
// THIS FILE (WNode.cs) IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE WNode.tt INSTEAD.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using NMeCab;
using NMeCab.Core;

namespace JapaneseStyleChanger
{
    /// <summary>
    /// A MeCab node dedicated for Japanese Style Changer in combination with UniDic 2.2 or later.
    /// </summary>
    public class WNode : MeCabNodeBase<WNode>
    {
		private bool Loaded;

        private void LoadFeatures()
        {
			string feature = Feature;
			string[] features;
			if (feature == null)
			{
<# foreach (var m in members) { #>
				_<#= m.N #> = <#= DefaultFeatureValue(m.T) #>;
<# } #>
			}
			else if ((features = StrUtils.SplitCsvRow(Feature, 29, 16)).Length >= 29)
			{
<# foreach (var m in members) { #>
				_<#= m.N #> = <#= Load(m.C, m.T) #>;
<# } #>
			}
			else
			{
<# foreach (var m in members) { #>
				_<#= m.N #> = features.Length >= <#= m.C + 1 #> ? <#= Load(m.C, m.T) #> : <#= DefaultFeatureValue(m.T) #>;
<# } #>
			}
            Loaded = true;
			Feature = null;
        }

<# foreach (var m in members) { #>

		///<summary><#= m.S #></summary>
		public <#= m.T #> <#= m.N #>
		{
			get
			{
				if (!Loaded) LoadFeatures();
				return _<#= m.N #>;
			}
		}
		private <#= m.T #> _<#= m.N #>;
<# } #>

<# foreach (var stat in MeCabNodeStatMembers) { #>

        public bool Is<#= stat #>
        {
            get { return Stat == MeCabNodeStat.<#= stat #>; }
        }
<# } #>

		public override string ToString()
		{
			return Surface
<# foreach (var m in members) { #>
				+ "," + <#= m.N #>
<# } #>
				;
		}
    }
}
